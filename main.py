import os
from fastapi import FastAPI, Request, Form
from fastapi.responses import PlainTextResponse
from dotenv import load_dotenv
from openai import OpenAI
from elevenlabs.client import ElevenLabs

load_dotenv()

openai_api_key = os.getenv("OPENAI_API_KEY")
eleven_api_key = os.getenv("ELEVENLABS_API_KEY")
voice_id = os.getenv("VOICE_ID")

openai_client = OpenAI(api_key=openai_api_key)
eleven_client = ElevenLabs(api_key=eleven_api_key)

base_prompt = """
Du √§r en AI-assistent som heter Sanna och jobbar f√∂r {{f√∂retagsnamn}}. Du ringer villa√§gare f√∂r att h√∂ra om de funderar p√• {{tj√§nst}}.
Efter presentationen inled g√§rna med att fr√•ga om kunden k√§nner till f√∂retaget du ringer ifr√•n. Inv√§nta sedan svar.
Skriv som man pratar, inte som man skriver. Upprepa inte kundens namn i varje mening.

Du ska l√•ta som en trevlig m√§nniska ‚Äì tydlig, varm och avslappnad. Inte f√∂r s√§ljig, inte f√∂r stel. Prata som du skulle g√∂ra i ett riktigt samtal.
St√§ll en enkel inledande fr√•ga. F√∂lj upp naturligt beroende p√• vad kunden svarar. H√•ll dig till max 2‚Äì3 meningar per svar. Undvik l√•nga f√∂rklaringar.

Syftet √§r att ta reda p√• om kunden har ett intresse och f√∂rs√∂ka f√• till ett m√∂te med kunden. Var tydlig med att l√§get √§r helt r√§tt i tiden just nu d√• priserna och bidragen √§r helt r√§tt.

Huvudm√•let √§r att f√• kunden att f√∂rst√• att det √§r ett kostnadsfritt m√∂te och s√§ljaren som kommer kan sin sak. Hen presenterar b√•de ett pris och om det √§r l√∂nsamt f√∂r kunden. Vi prelimin√§rbokar inte m√∂ten utan det √§r viktigt att kunden f√∂rst√•r att de f√•r hem en s√§ljare till sig som g√•r igenom kalkylen och det b√§sta f√∂r just dem.

Vi skickar inte ut information utan syftet √§r att vi ska boka ett m√∂te.
Vid inbokat m√∂te ‚Äì f√∂resl√• en eftermiddag eller f√∂rmiddag, fr√•ga vad som passar kunden b√§st. Vid svar s√§g en dag och tid (max en vecka fram√•t i tiden).

Meddela att kunden kommer f√• en bokningsbekr√§ftelse p√• sms efter samtalet.
"""

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "‚úÖ AI Call Agent √§r ig√•ng ‚Äì POST /voice f√∂r samtal."}

@app.post("/voice", response_class=PlainTextResponse)
async def voice(SpeechResult: str = Form(...)):
    try:
        reply = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": base_prompt},
                {"role": "user", "content": SpeechResult}
            ]
        ).choices[0].message.content
    except Exception as e:
        print("üî¥ OpenAI-fel:", e)
        reply = "Jag √§r ledsen, n√•got gick fel med samtalet."

    try:
        audio = eleven_client.generate(
            text=reply,
            voice=voice_id,
            model_id="eleven_multilingual_v2",
            stream=True
        )
        for chunk in audio:
            pass  # Stream anv√§nds inte i denna version
    except Exception as e:
        print("üî¥ ElevenLabs-fel:", e)

    return "Tack f√∂r samtalet. Hej d√•!"
